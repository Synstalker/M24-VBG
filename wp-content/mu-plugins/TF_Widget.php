<?php

/**
 * Class TF_Widget
 * Helper class for the manipulating Widgets
 *
 * @package     24dotcom
 * @subpackage  tf-core
 *
 * @see WP_Widget
 *
 */
class TF_Widget extends WP_Widget{

	/**
	 * fields can either be an array of arrays
	 * or just an single dimensional array of field names
	 *
	 * $field = array(
	 *
	 *              named_array_field => array(
	 *                  'type'  => 'text',
	 *                  'label' => 'Named Array Field',
	 *                  'id'    => 'no_need_for_this_if_using_a_named_array'
	 *              ),
	 *
	 *              field_name_with_no_array, //everything is autogenerated then
	 *
	 *              array(
	 *					'id' => 'standard_array_function_which_gets_sanitized',
	 *              )
	 *
	 *          );
	 * @var array
	 */
	var $fields = array();
	static $field_defaults = array(
		'id' => null,
		'label' => null,
		'type'  => 'text',
		'default' => null,
		'disabled' => false
	);


	var $id_base;
	var $name;
	var $css_class;
	var $description = 'Widget created by 24.com';
	var $customize_selective_refresh = true;

	public function __construct(){

		$this->id_base      = $this->id_base ?: sanitize_title( get_class( $this ) );
		$this->name         = $this->name ?: get_class( $this );
		$this->css_class    = $this->css_class ?: 'widget_'.sanitize_title( get_class( $this ) );
		$this->prep_fields();

		$args = array(
			'description'                   => $this->description,
			'customize_selective_refresh'   => $this->customize_selective_refresh
		);

		parent::__construct( $this->id, $this->name, $args );
	}


	public function widget( $args, $instance ) {
		//this must be overridden by the child class
	}


	public function form( $instance ) {
		$instance = wp_parse_args( (array) $instance, $this->get_field_defaults() );
		foreach( $this->fields as $field ){
			$field['disabled'] = $field['disabled'] == true ? 'disabled=disabled' : null;
 			?>
			<p>
				<label for="<?php echo $this->get_field_id( $field[ 'id' ] ); ?>">
					<?php _e( $field[ 'label' ], 'twentyfourdotcom' ); ?>:
					<input class="widefat" id="<?php echo $this->get_field_id( $field['id'] ); ?>" name="<?php echo $this->get_field_name( $field['id'] ); ?>" type="<?php echo $field[ 'type' ];?> " value="<?php echo esc_attr( $instance[ $field[ 'id' ] ] ); ?>" <?php echo esc_attr( $field[ 'disabled' ] ); ?> />
				</label>
			</p>
			<?php
		}

	}


	private final function prep_fields(){

		foreach( $this->fields as $key => &$field ){

			$_field = is_array( $field ) ? $field : array();
			$_field = wp_parse_args( $_field, self::$field_defaults );

			if( is_string( $field ) && empty( $_field['id'] ) ){
				$_field['id'] = $field;
			}

			if( is_array( $field ) && is_string( $key ) && empty( $_field['id'] ) ){
				$_field['id'] = $key;
			}

			$_field['label'] = empty( $_field['label'] ) ? ucwords( $_field['id'] ) : $_field['label'];

			$field = $_field;
		}
	}


	protected final function get_field_defaults(){

		$defaults = array();

		foreach( $this->fields as $field ){
			$defaults[ $field[ 'id' ] ] = $field[ 'default' ];
		}

		return $defaults;
	}


	public final function update( $new_instance, $old_instance ) {

		$instance = $old_instance;
		$new_instance = wp_parse_args((array) $new_instance, $this->get_field_defaults() );

		foreach( $this->fields as $field ){

			switch ( $field['type'] ) {
				default:
					$instance[ $field['id'] ] = sanitize_text_field( $new_instance[ $field['id'] ] );
			}
		}

		return $instance;
	}

}